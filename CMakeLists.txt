cmake_minimum_required(VERSION 3.6 FATAL_ERROR)
set(CMAKE_BUILD_TYPE_INIT Debug)

project(SimulationFramework)
if(DEFINED CMAKE_BUILD_TYPE)
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release MinSizeRel RelWithDebInfo)
endif()

# glad cmake variables
set(GLAD_API gl=4.3 CACHE INTERNAL "")
set(GLAD_EXPORT ON CACHE INTERNAL "")
set(GLAD_EXTENSIONS GL_EXT_texture_compression_s3tc,GL_EXT_texture_sRGB,GL_EXT_texture_filter_anisotropic CACHE INTERNAL "") # https://www.khronos.org/opengl/wiki/Ubiquitous_Extension
set(GLAD_GENERATOR c CACHE INTERNAL "")
set(GLAD_INSTALL OFF CACHE INTERNAL "")
set(GLAD_NO_LOADER ON CACHE INTERNAL "")
set(GLAD_PROFILE core CACHE INTERNAL "")
set(GLAD_SPEC gl CACHE INTERNAL "")
add_subdirectory(glad)

#assimp cmake variables
set(ASSIMP_ANDROID_JNIIOSYSTEM OFF CACE INTERNAL "")
set(ASSIMP_BIN_INSTALL_DIR bin CACHE INTERNAL "")
set(ASSIMP_BUILD_3DS_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_3D_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_3MF_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_AC_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_ASE_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_ASSBIN_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE INTERNAL "")
set(ASSIMP_BUILD_ASSIMP_VIEW OFF CACHE INTERNAL "")
set(ASSIMP_BUILD_ASSXML_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_B3D_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_BLEND_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_BVH_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_COB_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_COLLADA_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_CSM_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_DXF_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_FBX_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_GLTF_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_HMP_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_IFC_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_IRRMESH_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_IRR_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_LWO_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_LWS_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MD2_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MD3_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MD5_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MDC_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MDL_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_MS3D_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_NDO_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_NFF_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_NONFREE_C4D_IMPORTER OFF CACHE INTERNAL "")
set(ASSIMP_BUILD_OBJ_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_OFF_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_OGRE_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_OPENGEX_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_PLY_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_Q3BSP_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_Q3D_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_RAW_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_SAMPLES OFF CACHE INTERNAL "")
set(ASSIMP_BUILD_SIB_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_SMD_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_STL_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_TERRAGEN_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_TESTS OFF CACHE INTERNAL "")
set(ASSIMP_BUILD_XGL_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_X_IMPORTER ON CACHE INTERNAL "")
set(ASSIMP_BUILD_ZLIB OFF CACHE INTERNAL "")
set(ASSIMP_HEADERCHECK OFF CACHE INTERNAL "")
set(ASSIMP_INCLUDE_INSTALL_DIR include CACHE INTERNAL "")
set(ASSIMP_INSTALL_PDB ON CACHE INTERNAL "")
set(ASSIMP_LIBRARY_SUFFIX "" CACHE INTERNAL "")
set(ASSIMP_LIB_INSTALL_DIR lib CACHE INTERNAL "")
set(ASSIMP_NO_EXPORT OFF CACHE INTERNAL "")
set(ASSIMP_OPT_BUILD_PACKAGES OFF CACHE INTERNAL "")
set(ASSIMP_PACKAGE_VERSION 0 CACHE INTERNAL "")
set(DirectX_D3DCOMPILER_LIBRARY DirectX_D3DCOMPILER_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(DirectX_D3DX9_LIBRARY DirectX_D3DX9_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(DirectX_DXERR_LIBRARY DirectX_DXERR_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(DirectX_DXGI_LIBRARY DirectX_DXGI_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(DirectX_DXGUID_LIBRARY DirectX_DXGUID_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(DirectX_INCLUDE_DIR DirectX_INCLUDE_DIR-NOTFOUND CACHE INTERNAL "")
set(DirectX_LIBRARY DirectX_LIBRARY-NOTFOUND CACHE INTERNAL "")
set(CMAKE_INSTALL_PREFIX "C:/Development/Libraries" CACHE INTERNAL "")
add_subdirectory(assimp)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

add_executable(${PROJECT_NAME} "")
set_directory_properties(
	PROPERTIES
	VS_STARTUP_PROJECT ${PROJECT_NAME}
)

target_sources(
	${PROJECT_NAME}
	PRIVATE
	main.cpp
	OpenGLWidget.cpp OpenGLWidget.hpp
	OpenGLRenderer.hpp
	FileIO.hpp
	MyRendererUtils.hpp
	GLMainWindow.cpp GLMainWindow.hpp GLMainWindow.ui
	MyRenderer.cpp MyRenderer.hpp
	shaders.qrc
	shaders/phong_textured.vert shaders/phong_textured.frag
	shaders/phong_color.vert shaders/phong_color.frag
	shaders/depth.vert shaders/depth.frag
	shaders/debug.vert shaders/debug.frag
	shaders/smokeParticle.vert shaders/smokeParticle.frag
	shaders/smokeSlice.vert shaders/smokeSlice.frag
	shaders/shadowVolume.comp shaders/deepShadowMap.comp
	shaders/particleCreation.comp
	icon.qrc
	textures.qrc
	models.qrc
)

target_link_libraries(
	${PROJECT_NAME}
	PRIVATE
	glad
	assimp
)

install(TARGETS ${PROJECT_NAME} DESTINATION bin)

set(_QT_COMPONENTS Core Gui Widgets)
if(WIN32)
	#Comment this out for console
	set_property(TARGET ${PROJECT_NAME} PROPERTY WIN32_EXECUTABLE ON)

	target_sources(
		${PROJECT_NAME}
		PRIVATE
		icon.rc
	)

	file(GLOB _ICU_DLLS ${Qt5_DIR}/../../../bin/icu*[0-9].dll)
	set(_DEPENDENCIES)
	foreach(_ICU_DLL ${_ICU_DLLS})
		string(REPLACE ".dll" "$<$<CONFIG:Debug>:d>.dll" _ICU_DLL ${_ICU_DLL})
		list(APPEND _DEPENDENCIES ${_ICU_DLL})
	endforeach()
	foreach(_COMP ${_QT_COMPONENTS})
		list(APPEND _DEPENDENCIES $<TARGET_FILE:Qt5::${_COMP}>)
	endforeach()

	add_custom_command(
		TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} ARGS
		"-DSRC=${_DEPENDENCIES}"
		"-DDST=$<TARGET_FILE_DIR:${PROJECT_NAME}>"
		-P "${PROJECT_SOURCE_DIR}/InstallFile.cmake"
	)
	add_custom_command(
		TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} ARGS
		"-DSRC=${Qt5_DIR}/../../../plugins/platforms/qwindows$<$<CONFIG:Debug>:d>.dll"
		"-DDST=$<TARGET_FILE_DIR:${PROJECT_NAME}>/platforms"
		-P "${PROJECT_SOURCE_DIR}/InstallFile.cmake"
	)
	add_custom_command(
		TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} ARGS
		"-DSRC=${Qt5_DIR}/../../../plugins/imageformats/qico$<$<CONFIG:Debug>:d>.dll;${Qt5_DIR}/../../../plugins/imageformats/qjpeg$<$<CONFIG:Debug>:d>.dll"
		"-DDST=$<TARGET_FILE_DIR:${PROJECT_NAME}>/imageformats"
		-P "${PROJECT_SOURCE_DIR}/InstallFile.cmake"
	)
	
	#copy assimp dll to exe path post-build
	add_custom_command(
		TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} ARGS
		"-DSRC=$<TARGET_FILE_DIR:${PROJECT_NAME}>/../assimp/code/$<CONFIG>/assimp-vc140-mt.dll"
		"-DDST=$<TARGET_FILE_DIR:${PROJECT_NAME}>"
		-P "${PROJECT_SOURCE_DIR}/InstallFile.cmake"
	)
endif()

find_package(Qt5 5.4 REQUIRED COMPONENTS ${_QT_COMPONENTS})
foreach(_COMP ${_QT_COMPONENTS})
	target_link_libraries(
		${PROJECT_NAME}
		PRIVATE
		Qt5::${_COMP}
	)
endforeach()

set_target_properties(${PROJECT_NAME} PROPERTIES AUTOMOC ON)
set_property(GLOBAL PROPERTY AUTOGEN_SOURCE_GROUP "Generated Files")

target_include_directories(
	${PROJECT_NAME}
	PRIVATE
	${PROJECT_BINARY_DIR}
	eigen
	eigen/unsupported
	assimp/include
)

source_group("Form Files" REGULAR_EXPRESSION "\\.ui$")
source_group("Resource Files" REGULAR_EXPRESSION "\\.q?rc$")
source_group("Shader Files" REGULAR_EXPRESSION "\\.(vert|frag)$")
get_target_property(_SOURCES ${PROJECT_NAME} SOURCES)
foreach(_SOURCE ${_SOURCES})
	if(_SOURCE MATCHES "\\.(ui|qrc)$")
		if(_SOURCE MATCHES "\\.ui$")
			qt5_wrap_ui(_GENERATED ${_SOURCE})
		elseif(_SOURCE MATCHES "\\.qrc$")
			qt5_add_resources(_GENERATED ${_SOURCE})
		endif()
		target_sources(${PROJECT_NAME} PRIVATE ${_GENERATED})
		source_group("Generated Files" FILES ${_GENERATED})
	endif()
endforeach()
